"use client";

import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { 
  getConversationById, 
  getUserById 
} from "@/lib/data";
import { MoreVertical, MessageSquarePlus, UserPlus, StickyNote, Star, Tags, Plus } from 'lucide-react';

interface ContactDetailsProps {
  conversationId?: string;
}

export function ContactDetails({ conversationId }: ContactDetailsProps) {
  const conversation = conversationId ? getConversationById(conversationId) : null;
  const user = conversation ? getUserById(conversation.userId) : null;

  if (!conversation || !user) {
    return (
      <div className="w-80 border-l bg-white flex items-center justify-center">
        <p className="text-muted-foreground">Select a conversation to view details</p>
      </div>
    );
  }

  // Mock activity data - in a real app, this would come from the conversation data
  const activities = [
    {
      icon: MessageSquarePlus,
      title: "Conversation started via 'Admissions Live Chat'",
      timestamp: "2 hours ago"
    },
    {
      icon: UserPlus,
      title: "Sarah Johnson assigned to conversation",
      timestamp: "2 hours ago"
    },
    {
      icon: StickyNote,
      title: "A note was created",
      timestamp: "1 hour ago",
      meta: "by Sarah Johnson"
    },
    {
      icon: Star,
      title: `${user.name} rated the conversation`,
      timestamp: "45 minutes ago"
    },
    {
      icon: Tags,
      title: "3 tags added",
      timestamp: "30 minutes ago",
      meta: "Generated by AI",
      tags: ["Admissions", "Computer Science", "Scholarship"]
    }
  ];

  return (
    <div className="w-80 border-l bg-white flex flex-col h-full">
      {/* Header */}
      <div className="h-14 border-b px-4 flex items-center justify-between">
        <h3 className="font-medium">Contact details</h3>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm">
              <MoreVertical className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem>View all conversations</DropdownMenuItem>
            <DropdownMenuItem>Download conversations</DropdownMenuItem>
            <DropdownMenuItem>Merge contact</DropdownMenuItem>
            <DropdownMenuItem className="text-red-600">Delete contact</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <ScrollArea className="flex-1">
        <div className="divide-y">
          {/* Contact Overview */}
          <div className="p-4">
            <div className="flex items-center gap-3">
              <div className="relative">
                <Avatar className="h-12 w-12">
                  <AvatarFallback 
                    className={`${user.avatarBg} ${user.avatarText}`}
                  >
                    {user.initials}
                  </AvatarFallback>
                </Avatar>
                
              </div>
              
              <div>
                <h4 className="font-medium">{user.name}</h4>
                <div className="text-sm text-muted-foreground">
                  Last seen {user.lastSeen}
                </div>
              </div>
            </div>
          </div>

          {/* Accordion Sections */}
          <Accordion type="multiple" className="w-full">
            <AccordionItem value="activity">
              <AccordionTrigger className="px-4 text-sm">Activity</AccordionTrigger>
              <AccordionContent>
                <div className="px-4 space-y-4">
                  {activities.map((activity, index) => (
                    <div key={index} className="flex gap-2">
                      <div className="h-6 w-6 rounded-full bg-slate-100 flex items-center justify-center flex-shrink-0">
                        <activity.icon className="h-4 w-4 text-primary" />
                      </div>
                      <div>
                        <div className="text-sm font-medium">{activity.title}</div>
                        <div className="text-xs text-muted-foreground">
                          {activity.timestamp}
                          {activity.meta && ` - ${activity.meta}`}
                        </div>
                        {activity.tags && (
                          <div className="flex flex-wrap gap-1 mt-2">
                            {activity.tags.map((tag) => (
                              <Badge key={tag} variant="outline" className="text-xs">
                                {tag}
                              </Badge>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="details">
              <AccordionTrigger className="px-4 text-sm">Contact details</AccordionTrigger>
              <AccordionContent>
                <div className="px-4 space-y-2">
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Name</span>
                    <span className="text-sm font-medium">{user.name}</span>
                  </div>
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Email</span>
                    <span className="text-sm font-medium">{user.email}</span>
                  </div>
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Phone</span>
                    <span className="text-sm font-medium">{user.phone}</span>
                  </div>
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Language</span>
                    <span className="text-sm font-medium">{user.language}</span>
                  </div>
                </div>
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="conversation">
              <AccordionTrigger className="px-4 text-sm">
                Conversation info
              </AccordionTrigger>
              <AccordionContent>
                <div className="px-4 space-y-2">
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Status</span>
                    <Badge 
                      variant={conversation.status === "active" ? "default" : "secondary"}
                      className="text-xs"
                    >
                      {conversation.status}
                    </Badge>
                  </div>
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Messages</span>
                    <span className="text-sm font-medium">{conversation.messages.length}</span>
                  </div>
                  <div className="flex">
                    <span className="w-1/3 text-sm text-muted-foreground">Assigned</span>
                    <span className="text-sm font-medium">
                      {conversation.assignedAgents.length} agent(s)
                    </span>
                  </div>
                  {conversation.unreadCount > 0 && (
                    <div className="flex">
                      <span className="w-1/3 text-sm text-muted-foreground">Unread</span>
                      <Badge variant="destructive" className="text-xs">
                        {conversation.unreadCount}
                      </Badge>
                    </div>
                  )}
                </div>
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="tags">
              <AccordionTrigger className="px-4 text-sm">
                Tags <Badge className="ml-2 bg-blue-100 text-blue-800">3</Badge>
              </AccordionTrigger>
              <AccordionContent>
                <div className="px-4 space-y-4">
                  <div className="flex flex-wrap gap-2">
                    {["Admissions", "Computer Science", "Scholarship"].map((tag) => (
                      <Badge key={tag} variant="outline">{tag}</Badge>
                    ))}
                  </div>
                  <Button size="sm" variant="secondary" className="w-full">
                    <Plus className="h-4 w-4 mr-2" />
                    Add tag
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      </ScrollArea>
    </div>
  );
}
